openapi: "3.0.0"
info:
  title: "A Rest API for my personal blog app"
  description: "A Rest API for my personal blog app made by NodeJS, Express, TypeScript, PostgreSQL-Prisma"
  version: "1.0.0"
servers:
  - url: "http://localhost:8000/api"
    description: "Development Server"
security:
  - ApiKeyAuth: []

# Paths --------------------------------------------------------------------------
paths:
  /upload:
    post:
      tags:
        - Uploads
      summary: Uploads a file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              maximum: 5
              properties:
                "coverImage":
                    type: string
                    format: binary
            encoding:
              coverImage:
                contentType: image/png, image/jpeg, image/jpg, image/gif
      responses:
        '200':
          description: File uploaded successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: File Error Code (1, 2, 3, or 4)
                  message:
                    type: string
                    description: File Error Message
  /delete-cover/{fileName}:
    delete:
      tags:
        - Delete cover
      summary: Deletes a post cover image
      parameters:
        - in: path
          name: fileName
          required: true
          description: "File name"
          schema:
            type: string
      responses:
        '204':
          description: File deleted successfully
        "500":
          $ref: "#/components/responses/ServerError"

  # /posts -----------------------------------------------------------------------
  /posts:

    # Create post operation ------------------------------------------------------
    post:
      tags:
        - Posts
      summary: "Creates a post"
      description: "Creates a post with title and content"
      requestBody:
        description: "Create post request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePost"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CreatePost"
      responses:
        "201":
          description: "Created"
          headers:
            location:
              schema:
                type: string
                example: "/posts/8a19bab6-0976-4adb-ad68-c488468f89b7"
              description: "Created post link"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
    
    # Get all posts --------------------------------------------------------------
    get:
      tags:
        - Posts
      summary: "Retrieves all posts"
      description: "Retrieves all posts"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/Post"
        "500":
          $ref: "#/components/responses/ServerError"
  
    # Update a post by id operation ----------------------------------------------
    put:
      tags:
        - Posts
      summary: "Update post by id"
      description: "Update post title and content"
      requestBody:
        description: "Update post request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePost"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UpdatePost"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "204":
          description: "No Content"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  # /posts/{id} ------------------------------------------------------------------
  /posts/{id}:

    # Get post by id operation ---------------------------------------------------
    get:
      tags:
        - Posts
      summary: "Retrieves a post by post id"
      description: "Retrieves a post by post id"
      parameters:
        - in: path
          name: id
          required: true
          description: "Post id"
          schema:
            type: string
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

    # Delete a post by id operation ----------------------------------------------
    delete:
      tags:
        - Posts
      summary: "Deletes a post by given id"
      description: "Deletes a post by given id"
      parameters:
        - in: path
          name: id
          required: true
          description: "Post id"
          schema:
            type: string
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "204":
          description: "No Content"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  # /notes -----------------------------------------------------------------------
  /notes:

    # Create note operation ------------------------------------------------------
    post:
      tags:
        - Notes
      summary: "Creates a note"
      description: "Creates a note with content"
      requestBody:
        description: "Create note request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNote"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CreateNote"
      responses:
        "201":
          description: "Created"
          headers:
            location:
              schema:
                type: string
                example: "/notes/8a19bab6-0976-4adb-ad68-c488468f89b7"
              description: "Created note link"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
    
    # Get all notes --------------------------------------------------------------
    get:
      tags:
        - Notes
      summary: "Retrieves all notes"
      description: "Retrieves all notes"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/Note"
        "500":
          $ref: "#/components/responses/ServerError"
  
  # /notes/{id} ------------------------------------------------------------------
  /notes/{id}:

    # Get note by id operation ---------------------------------------------------
    get:
      tags:
        - Notes
      summary: "Retrieves a note by note id"
      description: "Retrieves a note by note id"
      parameters:
        - in: path
          name: id
          required: true
          description: "Note id"
          schema:
            type: string
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

    # Delete a note by id operation ----------------------------------------------
    delete:
      tags:
        - Notes
      summary: "Deletes a note by given id"
      description: "Deletes a note by given id"
      parameters:
        - in: path
          name: id
          required: true
          description: "Note id"
          schema:
            type: string
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "204":
          description: "No Content"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    
  # Add note interaction operation ------------------------------------------------------
  /notes/interactions:
    post:
      tags:
        - Notes
      summary: "Creates a note interaction"
      description: "Creates a note interaction"
      requestBody:
        description: "Create note interaction request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNoteInteraction"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CreateNoteInteraction"
      responses:
        "200":
          description: "OK"
          headers:
            location:
              schema:
                type: string
              description: "Added note interaction"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

    # Get note interactions --------------------------------------------------------------
    get:
      tags:
        - Notes
      summary: "Retrieves note interactions"
      description: "Retrieves note interactions"
      parameters:
        - in: query
          name: role
          required: true
          description: "Note interaction id"
          schema:
            type: string
        - in: query
          name: noteId
          required: true
          description: "Note id"
          schema:
            type: string
        - in: query
          name: guestId
          required: false
          description: "Guest id"
          schema:
            type: string
        - in: query
          name: userId
          required: false
          description: "User id"
          schema:
            type: string
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/NoteInteraction"
        "500":
          $ref: "#/components/responses/ServerError"

  # /tags -----------------------------------------------------------------------
  /tags:

    # Create tag operation ------------------------------------------------------
    post:
      tags:
        - Tags
      summary: "Creates a tag"
      description: "Creates a tag with a name"
      requestBody:
        description: "Create tag request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTag"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CreateTag"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "201":
          description: "Created"
          headers:
            location:
              schema:
                type: string
                example: "/tags/8a19bab6-0976-4adb-ad68-c488468f89b7"
              description: "Created tag link"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
    
    # Get all tags --------------------------------------------------------------
    get:
      tags:
        - Tags
      summary: "Retrieves all tags"
      description: "Retrieves all tags"
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/Tag"
        "500":
          $ref: "#/components/responses/ServerError"
  
  # /tags/{id} ------------------------------------------------------------------
  /tags/{id}:

    # Get tag by id operation ---------------------------------------------------
    get:
      tags:
        - Tags
      summary: "Retrieves a tag by tag id"
      description: "Retrieves a tag by tag id"
      parameters:
        - in: path
          name: id
          required: true
          description: "Tag id"
          schema:
            type: string
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

    # Delete a tag by id operation ----------------------------------------------
    delete:
      tags:
        - Tags
      summary: "Deletes a tag by given id"
      description: "Deletes a tag by given id"
      parameters:
        - in: path
          name: id
          required: true
          description: "Tag id"
          schema:
            type: string
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "204":
          description: "No Content"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

# Components ---------------------------------------------------------------------
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  
  # Schemas ----------------------------------------------------------------------
  schemas:
    
    # Post Schemas ---------------------------------------------------------------

    # Post Model -----------------------------------------------------------------
    Post:
      type: object
      properties:
        id:
          type: string
          description: "The post id"
          example: "000xy00-z000-0ab00-00c"
        createdAt:
          type: string
          description: "Created date of the post"
          example: "2023-03-14T21:49:57.272Z"
        updatedAt:
          type: string
          description: "Updated date of the post"
          example: "2023-03-14T21:49:57.272Z"
        title:
          type: string
          description: "The post title"
          example: "First Post Title"
        content:
          type: string
          description: "The post content"
          example: "First post content..."
          required: ["false"]
        cover:
          type: string
          description: "The post cover"
          example: "First post cover..."
          required: ["false"]
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
          description: "The post tags"
          example: ["Typescript", "React", "Vue"]
          required: ["true"]
        shareCount:
          type: number
          description: "The post share count"
          example: 0
        likeCount:
          type: number
          description: "The post share count"
          example: 0
        viewCount:
          type: number
          description: "The post share count"
          example: 0
    
    # Create Post Model ------------------------------------------------------------
    CreatePost:
      type: object
      properties:
        title:
          type: string
          description: "The post title"
          example: "First Post Title"
        content:
          type: string
          description: "The post content"
          example: "First post content..."
        cover:
          type: string
          description: "The post cover"
          example: "First post cover..."
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
          description: "The post tags"
          example: ["Typescript", "React", "Vue"]
          required: ["true"]
      required:
        - title
        - tags

    # Update Post Model ------------------------------------------------------------
    UpdatePost:
      type: object
      properties:
        id:
          type: string
          example: "000xy00-z000-0ab00-00c"
        title:
          type: string
          description: "The post title"
          example: "First Post Title"
        content:
          type: string
          description: "The post content"
          example: "First post content..."
        cover:
          type: string
          description: "The post cover"
          example: "First post cover..."
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
          description: "The post tags"
          example: ["Typescript", "React", "Vue"]
          required: ["true"]
      required:
        - title
        - id
        - tags

    # Tag Schemas ---------------------------------------------------------------

    # Tag Model -----------------------------------------------------------------
    Tag:
      type: object
      properties:
        id:
          type: string
          description: "The tag id"
          example: "000xy00-z000-0ab00-00c"
        name:
          type: string
          description: "The tag name"
          example: "First Tag Name"
    
    # Create Tag Model ------------------------------------------------------------
    CreateTag:
      type: object
      properties:
        name:
          type: string
          description: "The tag name"
          example: "First tag name"
      required:
        - name
    
    # Note Schemas ---------------------------------------------------------------
    
    # CreateNote Model ---------------------------------------------------------------
    CreateNote:
      type: object
      properties:
        content:
          type: string
          description: "The note content"
      required:
        - content
      
    # Note Model ---------------------------------------------------------------
    Note:
      type: object
      properties:
        id:
          type: string
          description: "The note id"
          example: "000xy00-z000-0ab00-00c"
        createdAt:
          type: string
          description: "Created date of the note"
          example: "2023-03-14T21:49:57.272Z"
        updatedAt:
          type: string
          description: "Updated date of the note"
          example: "2023-03-14T21:49:57.272Z"
        content:
          type: string
          description: "The note content"
          example: "First note content..."
        shareCount:
          type: number
          description: "The note share count"
          example: 0
        likeCount:
          type: number
          description: "The note share count"
          example: 0
        viewCount:
          type: number
          description: "The note share count"
          example: 0

    # CreateNoteInteraction Model ---------------------------------------------------------------
    CreateNoteInteraction:
      type: object
      properties:
        role:
          type: string
          description: "Interaction owner (user or guest)"
          example: "USER | GUEST"
        type:
          type: string
          description: "Interaction type"
          example: "LIKE | UNLIKE | VIEW | SHARE"
        guestId:
          type: string
          description: "Guest id from client (localstorage)"
          example: "ABCx34=#"
        userId:
          type: string
          description: "User id"
        noteId:
          type: string
          description: "Note id"
          example: "2387234-iealmkiea-234834-ieailemak"
      required:
        - role
        - type
        - noteId

    # NoteInteraction Model ---------------------------------------------------------------
    NoteInteraction:
      type: object
      properties:
        id:
          type: string
          description: "The note interaction id"
          example: "000xy00-z000-0ab00-00c"
        role:
          type: string
          description: "Interaction owner (user or guest)"
          example: "USER | GUEST"
        type:
          type: string
          description: "Interaction type"
          example: "LIKE | UNLIKE | VIEW | SHARE"
        guestId:
          type: string
          description: "Guest id from client (localstorage)"
          example: "ABCx34=#"
        userId:
          type: string
          description: "User id"
        noteId:
          type: string
          description: "Note id"
          example: "2387234-iealmkiea-234834-ieailemak"

    # Error Response Model ----------------------------------------------------------
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Internal server error"
        level:
          type: string
          example: "level"
        timestamp:
          type: string
          example: "2023-03-26 18:37:08:378"
  
  # Response Schemas ----------------------------------------------------------------
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: "The specified resource was not found"
      content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    BadRequest:
      description: "Bad request"
      content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    ServerError:
      description: "Internal server error"
      content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"